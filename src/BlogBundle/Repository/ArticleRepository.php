<?php

namespace BlogBundle\Repository;
use BlogBundle\Entity\Article;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $count
     * @param int $start
     * @param null $except
     * @return Paginator
     */
    public function getLatestWithImage($count = 10, $start = 0, $except = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->isNotNull('a.image'))
        ;

        if(is_array($except) && count($except)) {
            $qb->andWhere($qb->expr()->notIn('a.id', $except));
        }

        $qb
            ->orderBy('a.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;

        return new Paginator($qb->getQuery());
    }

    /**
     * @param int $count
     * @param int $start
     * @param null $except
     * @return Paginator
     */
    public function getLatestTextOnly($count = 10, $start = 0, $except = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->isNull('a.image'))
        ;

        if(is_array($except) && count($except)) {
            $qb->andWhere($qb->expr()->notIn('a.id', $except));
        }

        $qb
            ->orderBy('a.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;

        return new Paginator($qb->getQuery());
    }

    /**
     * @param Article $article
     * @return array
     */
    public function getArticleBefore(Article $article)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->lt('a.id', $article->getId()))
            ->orderBy('a.id', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult()
            ;
    }

    /**
     * @param Article $article
     * @return array
     */
    public function getArticleAfter(Article $article)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->gt('a.id', $article->getId()))
            ->orderBy('a.id', 'ASC')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult()
            ;
    }
    
    public function getRelatedArticles(Article $article, $count)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->isMemberOf())
            ->orderBy('a.id', 'ASC')
            ->setFirstResult(0)
            ->setMaxResults($count)
            ->getQuery()
            ->getResult()
            ;
    }
    
}
