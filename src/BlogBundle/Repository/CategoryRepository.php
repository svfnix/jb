<?php

namespace BlogBundle\Repository;

use BlogBundle\Entity\Category;
use DateTime;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Category $category
     * @param int $count
     * @param int $start
     * @param null $except
     * @return Paginator
     */
    public function getLatestArticlesWithImage(Category $category, $count = 10, $start = 0, $except = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->isNotNull('a.image'))
        ;

        if(is_array($except) && count($except)) {
            $qb->andWhere($qb->expr()->notIn('a.id', $except));
        }

        $qb
            ->andWhere($qb->expr()->eq('c.id', $category->getId()))
            ->orderBy('a.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;


        return new Paginator($qb->getQuery());
    }

    /**
     * @param Category $category
     * @param int $count
     * @param int $start
     * @param null $except
     * @return Paginator
     */
    public function getLatestArticles(Category $category, $count = 10, $start = 0, $except = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->eq('c.id', $category->getId()))
        ;

        if(is_array($except) && count($except)) {
            $qb->andWhere($qb->expr()->notIn('a.id', $except));
        }

        $qb
            ->orderBy('a.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;


        return new Paginator($qb->getQuery());
    }

    /**
     * @param Category $category
     * @param DateTime $since
     * @param int $count
     * @param int $start
     * @param null $except
     * @return Paginator
     */
    public function getMostViewedArticles(Category $category, DateTime $since, $count = 10, $start = 0, $except = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb
            ->select('a')
            ->from('BlogBundle:Article', 'a')
            ->join('a.categories', 'c')
            ->join('a.tags', 't')
            ->where($qb->expr()->gte('a.createdAt', $qb->expr()->literal($since->format('Y-m-d H:i:s'))))
        ;

        if(is_array($except) && count($except)) {
            $qb->andWhere($qb->expr()->notIn('a.id', $except));
        }

        $qb
            ->andWhere($qb->expr()->isNotNull('a.image'))
            ->andWhere($qb->expr()->eq('c.id', $category->getId()))
            ->orderBy('a.id', 'DESC')
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;


        return new Paginator($qb->getQuery());
    }
}
